{
  "name": "vscode-swift",
  "displayName": "Swift",
  "description": "Swift Language Support for Visual Studio Code.",
  "version": "2.0.0",
  "publisher": "swiftlang",
  "icon": "icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/swiftlang/vscode-swift"
  },
  "engines": {
    "vscode": "^1.88.0"
  },
  "categories": [
    "Programming Languages",
    "Debuggers",
    "Snippets",
    "Testing"
  ],
  "keywords": [
    "swift",
    "swiftlang",
    "sswg"
  ],
  "activationEvents": [
    "onLanguage:swift",
    "workspaceContains:Package.swift",
    "workspaceContains:compile_commands.json",
    "workspaceContains:compile_flags.txt",
    "workspaceContains:buildServer.json",
    "onDebugResolve:swift-lldb"
  ],
  "main": "./dist/src/extension.js",
  "contributes": {
    "icons": {
      "swift-icon": {
        "description": "The official icon for the Swift programming language",
        "default": {
          "fontPath": "assets/icons/icon-font.woff",
          "fontCharacter": "\\E001"
        }
      },
      "swift-documentation": {
        "description": "The icon for the Swift documentation preview editor",
        "default": {
          "fontPath": "assets/icons/icon-font.woff",
          "fontCharacter": "\\E002"
        }
      },
      "swift-documentation-preview": {
        "description": "The icon used as a button for showing the Swift documentation preview editor",
        "default": {
          "fontPath": "assets/icons/icon-font.woff",
          "fontCharacter": "\\E003"
        }
      }
    },
    "terminal": {
      "profiles": [
        {
          "title": "Swift",
          "id": "swift.terminalProfile"
        }
      ]
    },
    "languages": [
      {
        "id": "swift",
        "aliases": [
          "Swift"
        ],
        "extensions": [
          ".swiftinterface",
          ".swift"
        ]
      },
      {
        "id": "tutorial",
        "aliases": [
          "Tutorial"
        ],
        "filenamePatterns": [
          "*.tutorial"
        ]
      }
    ],
    "snippets": [
      {
        "language": "swift",
        "path": "./snippets/swift.code-snippets"
      },
      {
        "language": "swift",
        "path": "./snippets/xctest.code-snippets"
      },
      {
        "language": "swift",
        "path": "./snippets/swift-testing.code-snippets"
      }
    ],
    "commands": [
      {
        "command": "swift.previewDocumentation",
        "title": "Preview Documentation",
        "category": "Swift",
        "icon": "$(swift-documentation-preview)"
      },
      {
        "command": "swift.createNewProject",
        "title": "Create New Project...",
        "category": "Swift"
      },
      {
        "command": "swift.newFile",
        "title": "Create New Swift File...",
        "shortTitle": "Swift File",
        "category": "Swift"
      },
      {
        "command": "swift.updateDependencies",
        "title": "Update Package Dependencies",
        "icon": "$(cloud-download)",
        "category": "Swift"
      },
      {
        "command": "swift.resolveDependencies",
        "title": "Resolve Package Dependencies",
        "icon": "$(refresh)",
        "category": "Swift"
      },
      {
        "command": "swift.cleanBuild",
        "title": "Clean Build Folder",
        "category": "Swift"
      },
      {
        "command": "swift.run",
        "title": "Run Build",
        "category": "Swift"
      },
      {
        "command": "swift.debug",
        "title": "Debug Build",
        "category": "Swift"
      },
      {
        "command": "swift.resetPackage",
        "title": "Reset Package Dependencies",
        "icon": "$(clear-all)",
        "category": "Swift"
      },
      {
        "command": "swift.runScript",
        "title": "Run Swift Script",
        "category": "Swift"
      },
      {
        "command": "swift.useLocalDependency",
        "title": "Use Local Version",
        "category": "Swift"
      },
      {
        "command": "swift.editDependency",
        "title": "Edit Locally",
        "category": "Swift"
      },
      {
        "command": "swift.uneditDependency",
        "title": "Revert To Original Version",
        "category": "Swift"
      },
      {
        "command": "swift.openInWorkspace",
        "title": "Add to Workspace",
        "category": "Swift"
      },
      {
        "command": "swift.openExternal",
        "title": "View Repository",
        "category": "Swift"
      },
      {
        "command": "swift.openPackage",
        "title": "Open Package.swift",
        "category": "Swift"
      },
      {
        "command": "swift.restartLSPServer",
        "title": "Restart LSP Server",
        "category": "Swift"
      },
      {
        "command": "swift.reindexProject",
        "title": "Re-Index Project",
        "category": "Swift"
      },
      {
        "command": "swift.switchPlatform",
        "title": "Select Target Platform...",
        "category": "Swift"
      },
      {
        "command": "swift.selectToolchain",
        "title": "Select Toolchain...",
        "category": "Swift"
      },
      {
        "command": "swift.runSnippet",
        "title": "Run Swift Snippet",
        "category": "Swift"
      },
      {
        "command": "swift.debugSnippet",
        "title": "Debug Swift Snippet",
        "category": "Swift"
      },
      {
        "command": "swift.runPluginTask",
        "title": "Run Command Plugin",
        "category": "Swift"
      },
      {
        "command": "swift.insertFunctionComment",
        "title": "Insert Function Comment",
        "category": "Swift"
      },
      {
        "command": "swift.attachDebugger",
        "title": "Attach to Process...",
        "category": "Swift"
      },
      {
        "command": "swift.captureDiagnostics",
        "title": "Capture VS Code Swift Diagnostic Bundle",
        "category": "Swift"
      },
      {
        "command": "swift.clearDiagnosticsCollection",
        "title": "Clear Diagnostics Collection",
        "category": "Swift"
      },
      {
        "command": "swift.runTestsMultipleTimes",
        "title": "Run Multiple Times...",
        "category": "Swift"
      },
      {
        "command": "swift.runTestsUntilFailure",
        "title": "Run Until Failure...",
        "category": "Swift"
      },
      {
        "command": "swift.runAllTestsParallel",
        "title": "Run All Tests in Parallel",
        "category": "Test"
      }
    ],
    "configuration": [
      {
        "title": "Swift",
        "properties": {
          "swift.path": {
            "type": "string",
            "default": "",
            "markdownDescription": "Override the default path of the folder containing the Swift executables. The default is to look in the `PATH` environment variable. This path is also used to search for other executables used by the extension like `sourcekit-lsp` and `lldb`."
          },
          "swift.buildArguments": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Additional arguments to pass to `swift build` and `swift test`. Keys and values should be provided as individual entries in the list. If you have created a copy of the build task in `tasks.json` then these build arguments will not be propagated to that task."
          },
          "swift.packageArguments": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Additional arguments to pass to swift commands that do package resolution, such as `swift package resolve`, `swift package update`, `swift build` and `swift test`. Keys and values should be provided as individual entries in the list."
          },
          "swift.additionalTestArguments": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Additional arguments to pass to the `swift test` or `swift build` commands used when building and running tests from within VS Code.",
            "scope": "machine-overridable"
          },
          "swift.testEnvironmentVariables": {
            "type": "object",
            "patternProperties": {
              ".*": {
                "type": "string"
              }
            },
            "default": {},
            "markdownDescription": "Environment variables to set when running tests. To set environment variables when debugging an application you should edit the `env` field in the relevant `launch.json` configuration.",
            "scope": "machine-overridable"
          },
          "swift.sanitizer": {
            "type": "string",
            "default": "off",
            "enum": [
              "off",
              "thread",
              "address"
            ],
            "markdownDescription": "Runtime [sanitizer instrumentation](https://www.swift.org/documentation/server/guides/llvm-sanitizers.html).",
            "scope": "machine-overridable"
          },
          "swift.searchSubfoldersForPackages": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Search sub-folders of workspace folder for Swift Packages at start up.",
            "scope": "machine-overridable"
          },
          "swift.autoGenerateLaunchConfigurations": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When loading a `Package.swift`, auto-generate `launch.json` configurations for running any executables.",
            "scope": "machine-overridable"
          },
          "swift.disableAutoResolve": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Disable automatic running of `swift package resolve` whenever the `Package.swift` or `Package.resolve` files are updated. This will also disable searching for command plugins and the initial test discovery process.",
            "scope": "machine-overridable"
          },
          "swift.diagnosticsCollection": {
            "type": "string",
            "default": "keepSourceKit",
            "markdownDescription": "Controls how diagnostics from the various providers are merged into the collection of `swift` errors and warnings shown in the Problems pane.",
            "enum": [
              "onlySwiftc",
              "onlySourceKit",
              "keepSwiftc",
              "keepSourceKit",
              "keepAll"
            ],
            "enumDescriptions": [
              "Only provide diagnostics from `swiftc`.",
              "Only provide diagnostics from `SourceKit`.",
              "When merging diagnostics, give precedence to diagnostics from `swiftc`.",
              "When merging diagnostics, give precedence to diagnostics from `SourceKit`.",
              "Keep diagnostics from all providers."
            ]
          },
          "swift.diagnosticsStyle": {
            "type": "string",
            "default": "llvm",
            "markdownDescription": "The formatting style used when printing diagnostics in the Problems panel. Corresponds to the `-diagnostic-style` option to pass to `swiftc` when running `swift` tasks.",
            "enum": [
              "default",
              "llvm",
              "swift"
            ],
            "markdownEnumDescriptions": [
              "Use whichever diagnostics style `swiftc` produces by default.",
              "Use the `llvm` diagnostic style. This allows the parsing of \"notes\".",
              "Use the `swift` diagnostic style. This means that \"notes\" will not be parsed. This option has no effect in Swift versions prior to 5.10."
            ]
          },
          "swift.backgroundCompilation": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "**Experimental**: Run `swift build` in the background whenever a file is saved. It is possible the background compilation will already be running when you attempt a compile yourself, so this is disabled by default."
          },
          "swift.actionAfterBuildError": {
            "type": "string",
            "default": "Focus Terminal",
            "enum": [
              "Focus Problems",
              "Focus Terminal",
              "Do Nothing"
            ],
            "enumDescriptions": [
              "Focus on Problems View",
              "Focus on Build Task Terminal"
            ],
            "markdownDescription": "Action after a Build task generates errors."
          },
          "swift.buildPath": {
            "type": "string",
            "default": "",
            "markdownDescription": "The path to a directory that will be used for build artifacts. This path will be added to all swift package manager commands that are executed by vscode-swift extension via `--scratch-path` option. When no value provided - nothing gets passed to swift package manager and it will use its default value of `.build` folder in the workspace.\n\nYou can use absolute path for directory or the relative path, which will use the workspace path as a base. Note that VS Code does not respect tildes (`~`) in paths which represents user home folder under *nix systems."
          },
          "swift.disableSwiftPackageManagerIntegration": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Disables automated Build Tasks, Package Dependency view, Launch configuration generation and TestExplorer."
          },
          "swift.warnAboutSymlinkCreation": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether or not the extension will warn about being unable to create symlinks. (Windows only)",
            "scope": "application"
          },
          "swift.enableTerminalEnvironment": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether or not the extension will contribute environment variables defined in `Swift: Environment Variables` to the integrated terminal. If this is set to `true` and a custom `Swift: Path` is also set then the swift path is appended to the terminal's `PATH`."
          },
          "swift.pluginPermissions": {
            "type": "object",
            "default": {},
            "markdownDescription": "Configures a list of permissions to be used when running a command plugins.\n\nPermissions objects are defined in the form:\n\n`{ \"PluginName:command\": { \"allowWritingToPackageDirectory\": true } }`.\n\nA key of `PluginName:command` will set permissions for a specific command. A key of `PluginName` will set permissions for all commands in the plugin.",
            "scope": "machine-overridable",
            "patternProperties": {
              "^([a-zA-Z0-9_-]+(:[a-zA-Z0-9_-]+)?)$": {
                "type": "object",
                "properties": {
                  "disableSandbox": {
                    "type": "boolean",
                    "description": "Disable using the sandbox when executing plugins"
                  },
                  "allowWritingToPackageDirectory": {
                    "type": "boolean",
                    "description": "Allow the plugin to write to the package directory"
                  },
                  "allowWritingToDirectory": {
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "Allow the plugin to write to an additional directory"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Allow the plugin to write to additional directories"
                      }
                    ]
                  },
                  "allowNetworkConnections": {
                    "type": "string",
                    "description": "Allow the plugin to make network connections"
                  }
                }
              }
            }
          },
          "swift.attachmentsPath": {
            "type": "string",
            "default": ".build/attachments",
            "markdownDescription": "The path to a directory that will be used to store attachments produced during a test run.\n\nA relative path resolves relative to the root directory of the workspace running the test(s)",
            "scope": "machine-overridable"
          }
        }
      },
      {
        "title": "Code Coverage",
        "properties": {
          "swift.excludeFromCodeCoverage": {
            "description": "A list of paths to exclude from code coverage reports. Paths can be absolute or relative to the workspace root.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        }
      },
      {
        "title": "User Interface",
        "properties": {
          "swift.excludePathsFromPackageDependencies": {
            "markdownDescription": "A list of paths to exclude from the Package Dependencies view.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              ".git",
              ".github"
            ]
          },
          "swift.showBuildStatus": {
            "type": "string",
            "default": "swiftStatus",
            "markdownDescription": "Controls where to show the Swift build progress when running a `swift` build task.",
            "enum": [
              "never",
              "swiftStatus",
              "progress",
              "notification"
            ],
            "enumDescriptions": [
              "Never show the Swift build status.",
              "Show the Swift build status in a status bar item provided by the Swift extension.",
              "Show the Swift build status in the \"Progress Message\" status bar item provided by VS Code.",
              "Show the Swift build status as a progress notification."
            ]
          },
          "swift.showCreateSwiftProjectInWelcomePage": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether or not the create new swift project button appears in the welcome page."
          },
          "swift.openAfterCreateNewProject": {
            "type": "string",
            "enum": [
              "always",
              "alwaysNewWindow",
              "whenNoFolderOpen",
              "prompt"
            ],
            "enumDescriptions": [
              "Always open in current window.",
              "Always open in a new window.",
              "Only open in current window when no folder is opened.",
              "Always prompt for action."
            ],
            "default": "prompt",
            "markdownDescription": "Controls whether to open a swift project automatically after creating it."
          }
        }
      },
      {
        "title": "SourceKit-LSP",
        "properties": {
          "swift.sourcekit-lsp.serverPath": {
            "type": "string",
            "markdownDescription": "The path of the `sourcekit-lsp` executable. The default is to look in the path where `swift` is found.",
            "markdownDeprecationMessage": "**Deprecated**: The sourcekit-lsp executable relies on outputs from tools in your current toolchain. If your sourcekit-lsp version does not match your toolchain you may experience unexpected behaviour. Only modify this setting when developing sourcekit-lsp.",
            "order": 1
          },
          "swift.sourcekit-lsp.serverArguments": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Arguments to pass to SourceKit-LSP. Keys and values should be provided as individual entries in the list. e.g. `['--log-level', 'debug']`",
            "order": 2
          },
          "swift.sourcekit-lsp.supported-languages": {
            "type": "array",
            "default": [
              "swift",
              "objective-c",
              "objective-cpp",
              "c",
              "cpp"
            ],
            "markdownDescription": "List of languages supported by SourceKit-LSP. This is used to determine whether SourceKit-LSP should provide language features for a particular file type. If you want a different extension to provide support for a language, remove it from the list.",
            "items": {
              "type": "string",
              "enum": [
                "swift",
                "objective-c",
                "objective-cpp",
                "c",
                "cpp"
              ]
            },
            "order": 3
          },
          "swift.sourcekit-lsp.backgroundIndexing": {
            "type": "string",
            "enum": [
              "on",
              "off",
              "auto"
            ],
            "default": "auto",
            "markdownDescription": "Turns background indexing `on` or `off`. `auto` will enable background indexing if the Swift version is >= 6.1. This option has no effect in Swift versions prior to 6.0.",
            "order": 4
          },
          "swift.sourcekit-lsp.trace.server": {
            "type": "string",
            "default": "off",
            "enum": [
              "off",
              "messages",
              "verbose"
            ],
            "markdownDescription": "Controls logging the communication between VS Code and the SourceKit-LSP language server. Logs can be viewed in Output > SourceKit Language Server.",
            "order": 5
          },
          "swift.sourcekit-lsp.disable": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Disable SourceKit-LSP. This will turn off features like code completion, error diagnostics and jump-to-definition. Features like swift-testing test discovery will not work correctly.",
            "order": 6
          },
          "sourcekit-lsp.inlayHints.enabled": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Display Inlay Hints. Inlay Hints are variable annotations indicating their inferred type. They are only available if you are using Swift 5.6 or later.",
            "markdownDeprecationMessage": "**Deprecated**: Please use `#editor.inlayHints.enabled#` instead."
          },
          "sourcekit-lsp.support-c-cpp": {
            "type": "string",
            "default": "cpptools-inactive",
            "enum": [
              "enable",
              "disable",
              "cpptools-inactive"
            ],
            "enumDescriptions": [
              "Always enable",
              "Always disable",
              "Disable when C/C++ extension is active"
            ],
            "markdownDescription": "Add LSP functionality for C/C++ files. By default this is set to disable when the C/C++ extension is active.",
            "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.supported-languages#` instead."
          },
          "sourcekit-lsp.serverPath": {
            "type": "string",
            "markdownDescription": "The path of the `sourcekit-lsp` executable. The default is to look in the path where `swift` is found.",
            "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.serverPath#` instead."
          },
          "sourcekit-lsp.serverArguments": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Arguments to pass to SourceKit-LSP. Keys and values should be provided as individual entries in the list. e.g. `['--log-level', 'debug']`",
            "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.serverArguments#` instead."
          },
          "sourcekit-lsp.trace.server": {
            "type": "string",
            "default": "off",
            "enum": [
              "off",
              "messages",
              "verbose"
            ],
            "markdownDescription": "Traces the communication between VS Code and the SourceKit-LSP language server.",
            "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.trace.server#` instead."
          },
          "sourcekit-lsp.disable": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Disable the running of SourceKit-LSP.",
            "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.disable#` instead."
          }
        }
      },
      {
        "title": "Debugger",
        "properties": {
          "swift.debugger.useDebugAdapterFromToolchain": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Use the LLDB debug adapter packaged with the Swift toolchain as your debug adapter. Note: this is only available starting with Swift 6. The CodeLLDB extension will be used if your Swift toolchain does not contain lldb-dap.",
            "order": 1
          },
          "swift.debugger.path": {
            "type": "string",
            "default": "",
            "markdownDescription": "Path to lldb debug adapter.",
            "order": 2
          }
        }
      },
      {
        "title": "Advanced",
        "properties": {
          "swift.swiftEnvironmentVariables": {
            "type": "object",
            "patternProperties": {
              ".*": {
                "type": "string"
              }
            },
            "default": {},
            "markdownDescription": "Additional environment variables to pass to swift operations (`swift build`, `swift resolve`, etc...).",
            "order": 1
          },
          "swift.runtimePath": {
            "type": "string",
            "default": "",
            "markdownDescription": "The path of the folder containing the Swift runtime libraries. This is of use when supporting non-standard SDK layouts on Windows. On Windows the runtime path is added to the `Path` environment variable. This is of less use on macOS and Linux but will be added to `DYLD_LIBRARY_PATH` and `LD_LIBRARY_PATH` environment variables respectively on each platform. ",
            "order": 2
          },
          "swift.SDK": {
            "type": "string",
            "default": "",
            "markdownDescription": "The path of the SDK to compile against (`--sdk` parameter). This is of use when supporting non-standard SDK layouts on Windows and using custom SDKs. The default SDK is determined by the environment on macOS and Windows.\n\nFor SwiftPM projects, prefer using `swift.swiftSDK` with a triple (such as `arm64-apple-ios`) or Swift SDK name instead.",
            "order": 3
          },
          "swift.swiftSDK": {
            "type": "string",
            "default": "",
            "markdownDescription": "The [Swift SDK](https://github.com/swiftlang/swift-evolution/blob/main/proposals/0387-cross-compilation-destinations.md) to compile against (`--swift-sdk` parameter).",
            "order": 4
          },
          "swift.diagnostics": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Output additional diagnostics to the Swift Output View.",
            "order": 100
          }
        }
      }
    ],
    "keybindings": [
      {
        "command": "swift.newFile",
        "key": "Alt+S Alt+N"
      },
      {
        "command": "swift.insertFunctionComment",
        "key": "Alt+Ctrl+/",
        "mac": "Alt+Cmd+/",
        "when": "editorTextFocus"
      }
    ],
    "menus": {
      "testing/item/gutter": [
        {
          "command": "swift.runTestsMultipleTimes",
          "group": "testExtras",
          "when": "testId in swift.tests"
        },
        {
          "command": "swift.runTestsUntilFailure",
          "group": "testExtras",
          "when": "testId in swift.tests"
        }
      ],
      "testing/item/context": [
        {
          "command": "swift.runTestsMultipleTimes",
          "group": "testExtras",
          "when": "testId in swift.tests"
        },
        {
          "command": "swift.runTestsUntilFailure",
          "group": "testExtras",
          "when": "testId in swift.tests"
        }
      ],
      "file/newFile": [
        {
          "command": "swift.newFile",
          "group": "file",
          "when": "swift.isActivated"
        }
      ],
      "explorer/context": [
        {
          "command": "swift.newFile",
          "group": "swift",
          "when": "swift.isActivated"
        }
      ],
      "commandPalette": [
        {
          "command": "swift.previewDocumentation",
          "when": "swift.supportsDocumentationLivePreview"
        },
        {
          "command": "swift.createNewProject",
          "when": "!swift.isActivated || swift.createNewProjectAvailable"
        },
        {
          "command": "swift.updateDependencies",
          "when": "swift.hasPackage"
        },
        {
          "command": "swift.resolveDependencies",
          "when": "swift.hasPackage"
        },
        {
          "command": "swift.cleanBuild",
          "when": "swift.hasPackage"
        },
        {
          "command": "swift.switchPlatform",
          "when": "swift.isActivated && isMac"
        },
        {
          "command": "swift.insertFunctionComment",
          "when": "swift.isActivated"
        },
        {
          "command": "swift.resetPackage",
          "when": "swift.hasPackage"
        },
        {
          "command": "swift.restartLSPServer",
          "when": "swift.isActivated"
        },
        {
          "command": "swift.openPackage",
          "when": "swift.hasPackage"
        },
        {
          "command": "swift.useLocalDependency",
          "when": "false"
        },
        {
          "command": "swift.editDependency",
          "when": "false"
        },
        {
          "command": "swift.openInWorkspace",
          "when": "false"
        },
        {
          "command": "swift.uneditDependency",
          "when": "false"
        },
        {
          "command": "swift.openExternal",
          "when": "false"
        },
        {
          "command": "swift.run",
          "when": "editorLangId == swift && swift.currentTargetType == 'executable'"
        },
        {
          "command": "swift.debug",
          "when": "editorLangId == swift && swift.currentTargetType == 'executable'"
        },
        {
          "command": "swift.runScript",
          "when": "!swift.fileIsSnippet && editorLangId == swift && swift.currentTargetType == 'none'"
        },
        {
          "command": "swift.runSnippet",
          "when": "swift.fileIsSnippet"
        },
        {
          "command": "swift.debugSnippet",
          "when": "swift.fileIsSnippet"
        },
        {
          "command": "swift.runPluginTask",
          "when": "swift.packageHasPlugins"
        },
        {
          "command": "swift.attachDebugger",
          "when": "swift.lldbVSCodeAvailable"
        },
        {
          "command": "swift.reindexProject",
          "when": "swift.supportsReindexing"
        },
        {
          "command": "swift.runAllTestsParallel",
          "when": "swift.isActivated"
        }
      ],
      "editor/context": [
        {
          "submenu": "swift.editor"
        }
      ],
      "editor/title": [
        {
          "command": "swift.previewDocumentation",
          "when": "swift.supportsDocumentationLivePreview && (editorLangId == markdown || editorLangId == tutorial || editorLangId == swift)",
          "group": "navigation"
        }
      ],
      "swift.editor": [
        {
          "command": "swift.run",
          "group": "1_file@1",
          "when": "editorLangId == swift && swift.currentTargetType == 'executable'"
        },
        {
          "command": "swift.debug",
          "group": "1_file@2",
          "when": "editorLangId == swift && swift.currentTargetType == 'executable'"
        },
        {
          "command": "swift.runScript",
          "group": "1_file@3",
          "when": "!swift.fileIsSnippet && editorLangId == swift && swift.currentTargetType == 'none'"
        },
        {
          "command": "swift.runSnippet",
          "group": "1_file@4",
          "when": "swift.fileIsSnippet"
        },
        {
          "command": "swift.debugSnippet",
          "group": "1_file@5",
          "when": "swift.fileIsSnippet"
        },
        {
          "command": "swift.cleanBuild",
          "group": "2_pkg@1",
          "when": "swift.hasPackage"
        }
      ],
      "view/title": [
        {
          "command": "swift.updateDependencies",
          "when": "view == packageDependencies",
          "group": "navigation"
        },
        {
          "command": "swift.resolveDependencies",
          "when": "view == packageDependencies",
          "group": "navigation"
        },
        {
          "command": "swift.resetPackage",
          "when": "view == packageDependencies",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "swift.useLocalDependency",
          "when": "view == packageDependencies && viewItem == remote"
        },
        {
          "command": "swift.uneditDependency",
          "when": "view == packageDependencies && viewItem == editing"
        },
        {
          "command": "swift.openInWorkspace",
          "when": "view == packageDependencies && viewItem == editing"
        },
        {
          "command": "swift.openInWorkspace",
          "when": "view == packageDependencies && viewItem == local"
        },
        {
          "command": "swift.openExternal",
          "when": "view == packageDependencies && viewItem != local"
        }
      ]
    },
    "submenus": [
      {
        "id": "swift.editor",
        "label": "Swift"
      }
    ],
    "problemMatchers": [
      {
        "name": "swiftc",
        "owner": "swift",
        "source": "swiftc",
        "fileLocation": "absolute",
        "pattern": [
          {
            "regexp": "^(.*?):(\\d+)(?::(\\d+))?:\\s+(warning|error|note):\\s+(.*)$",
            "file": 1,
            "line": 2,
            "column": 3,
            "severity": 4,
            "message": 5
          }
        ]
      }
    ],
    "taskDefinitions": [
      {
        "type": "swift",
        "properties": {
          "args": {
            "description": "An array of arguments for the command. Each argument will be quoted separately.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "env": {
            "type": "object",
            "patternProperties": {
              ".*": {
                "type": "string"
              }
            },
            "description": "Additional environment variables to set when running the task.",
            "default": {}
          },
          "cwd": {
            "description": "The folder to run the task in.",
            "type": "string"
          },
          "disableTaskQueue": {
            "description": "Disable any queued tasks while running the task. This includes the auto resolve when Packages.resolved is updated.",
            "type": "boolean"
          },
          "dontTriggerTestDiscovery": {
            "description": "Don't trigger the test discovery process.",
            "type": "boolean"
          },
          "showBuildStatus": {
            "description": "Where to show the Swift build progress when running a `swift` build task. Default comes from the `swift.showBuildStatus` setting.",
            "type": "string",
            "enum": [
              "never",
              "swiftStatus",
              "progress",
              "notification"
            ]
          },
          "macos": {
            "type": "object",
            "description": "macOS specific task configuration",
            "properties": {
              "args": {
                "description": "An array of arguments for the command. Each argument will be quoted separately.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "env": {
                "type": "object",
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "description": "Additional environment variables to set when running the task.",
                "default": {}
              },
              "cwd": {
                "description": "The folder to run the task in.",
                "type": "string"
              }
            }
          },
          "linux": {
            "type": "object",
            "description": "Linux specific task configuration",
            "properties": {
              "args": {
                "description": "An array of arguments for the command. Each argument will be quoted separately.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "env": {
                "type": "object",
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "description": "Additional environment variables to set when running the task.",
                "default": {}
              },
              "cwd": {
                "description": "The folder to run the task in.",
                "type": "string"
              }
            }
          },
          "windows": {
            "type": "object",
            "description": "Windows specific task configuration",
            "properties": {
              "args": {
                "description": "An array of arguments for the command. Each argument will be quoted separately.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "env": {
                "type": "object",
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "description": "Additional environment variables to set when running the task.",
                "default": {}
              },
              "cwd": {
                "description": "The folder to run the task in.",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "args"
        ]
      },
      {
        "type": "swift-plugin",
        "properties": {
          "command": {
            "description": "The plugin command to execute. This should not contain any arguments as it will be quoted.",
            "type": "string"
          },
          "args": {
            "description": "An array of arguments for the command. Each argument will be quoted separately.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disableSandbox": {
            "description": "Plugins normally run inside a sandbox. Set this to true to disable the sandbox when running .",
            "type": "boolean"
          },
          "allowWritingToPackageDirectory": {
            "description": "Allow this plugin to write to the package directory.",
            "type": "boolean"
          },
          "cwd": {
            "description": "The folder to run the swift plugin in.",
            "type": "string"
          },
          "disableTaskQueue": {
            "description": "Disable any queued tasks while running this command plugin. This includes the auto resolve when Packages.resolved is updated.",
            "type": "boolean"
          }
        },
        "required": [
          "command",
          "args"
        ]
      }
    ],
    "views": {
      "explorer": [
        {
          "id": "packageDependencies",
          "name": "Package Dependencies",
          "icon": "$(archive)",
          "when": "swift.hasPackage"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "explorer",
        "contents": "You can also create a new Swift project.\n[Create Swift Project](command:swift.createNewProject)",
        "when": "workspaceFolderCount == 0 && config.swift.showCreateSwiftProjectInWelcomePage"
      }
    ],
    "breakpoints": [
      {
        "language": "asm"
      },
      {
        "language": "c"
      },
      {
        "language": "cpp"
      },
      {
        "language": "objective-c"
      },
      {
        "language": "objective-cpp"
      },
      {
        "language": "rust"
      },
      {
        "language": "swift"
      }
    ],
    "debuggers": [
      {
        "type": "swift-lldb",
        "label": "Swift LLDB Debugger",
        "configurationAttributes": {
          "launch": {
            "required": [
              "program"
            ],
            "properties": {
              "program": {
                "type": "string",
                "description": "Path to the program to debug."
              },
              "args": {
                "type": [
                  "array",
                  "string"
                ],
                "description": "Arguments to provide to the program.",
                "default": []
              },
              "cwd": {
                "type": "string",
                "description": "The working directory that the program will be launched within.",
                "default": "${workspaceRoot}"
              },
              "env": {
                "type": "object",
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "description": "Additional environment variables to set when launching the program.",
                "default": {}
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop after launch.",
                "default": false
              },
              "disableASLR": {
                "type": "boolean",
                "description": "Enable or disable Address space layout randomization if the debugger supports it.",
                "default": true
              },
              "disableSTDIO": {
                "type": "boolean",
                "description": "Don't retrieve STDIN, STDOUT and STDERR as the program is running.",
                "default": false
              },
              "shellExpandArguments": {
                "type": "boolean",
                "description": "Expand program arguments as a shell would without actually launching the program in a shell.",
                "default": false
              },
              "detachOnError": {
                "type": "boolean",
                "description": "Detach from the program.",
                "default": false
              },
              "sourcePath": {
                "type": "string",
                "description": "Specify a source path to remap \"./\" to allow full paths to be used when setting breakpoints in binaries that have relative source paths."
              },
              "sourceMap": {
                "type": "array",
                "description": "Specify an array of path remappings; each element must itself be a two element array containing a source and destination pathname. Overrides sourcePath.",
                "default": []
              },
              "debuggerRoot": {
                "type": "string",
                "description": "Specify a working directory to set the debug adaptor to so relative object files can be located."
              },
              "targetTriple": {
                "type": "string",
                "description": "Triplet of the target architecture to override value derived from the program file."
              },
              "platformName": {
                "type": "string",
                "description": "Name of the execution platform to override value derived from the program file."
              },
              "initCommands": {
                "type": "array",
                "description": "Initialization commands executed upon debugger startup.",
                "default": []
              },
              "preRunCommands": {
                "type": "array",
                "description": "Commands executed just before the program is launched.",
                "default": []
              },
              "postRunCommands": {
                "type": "array",
                "description": "Commands executed just as soon as the program is successfully launched when it's in a stopped state prior to any automatic continuation.",
                "default": []
              },
              "launchCommands": {
                "type": "array",
                "description": "Custom commands that are executed instead of launching a process. A target will be created with the launch arguments prior to executing these commands. The commands may optionally create a new target and must perform a launch. A valid process must exist after these commands complete or the \"launch\" will fail. Launch the process with \"process launch -s\" to make the process to at the entry point since lldb-vscode will auto resume if necessary.",
                "default": []
              },
              "stopCommands": {
                "type": "array",
                "description": "Commands executed each time the program stops.",
                "default": []
              },
              "exitCommands": {
                "type": "array",
                "description": "Commands executed at the end of debugging session.",
                "default": []
              },
              "runInTerminal": {
                "type": "boolean",
                "description": "Launch the program inside an integrated terminal in the IDE. Useful for debugging interactive command line programs",
                "default": false
              },
              "timeout": {
                "type": "string",
                "description": "The time in seconds to wait for a program to stop at entry point when launching with \"launchCommands\". Defaults to 30 seconds."
              }
            }
          },
          "attach": {
            "properties": {
              "program": {
                "type": "string",
                "description": "Path to the program to attach to."
              },
              "pid": {
                "type": [
                  "number"
                ],
                "description": "System process ID to attach to."
              },
              "waitFor": {
                "type": "boolean",
                "description": "If set to true, then wait for the process to launch by looking for a process with a basename that matches `program`. No process ID needs to be specified when using this flag.",
                "default": true
              },
              "sourcePath": {
                "type": "string",
                "description": "Specify a source path to remap \"./\" to allow full paths to be used when setting breakpoints in binaries that have relative source paths."
              },
              "sourceMap": {
                "type": "array",
                "description": "Specify an array of path remappings; each element must itself be a two element array containing a source and destination pathname. Overrides sourcePath.",
                "default": []
              },
              "debuggerRoot": {
                "type": "string",
                "description": "Specify a working directory to set the debug adaptor to so relative object files can be located."
              },
              "targetTriple": {
                "type": "string",
                "description": "Triplet of the target architecture to override value derived from the program file."
              },
              "platformName": {
                "type": "string",
                "description": "Name of the execution platform to override value derived from the program file."
              },
              "attachCommands": {
                "type": "array",
                "description": "Custom commands that are executed instead of attaching to a process ID or to a process by name. These commands may optionally create a new target and must perform an attach. A valid process must exist after these commands complete or the \"attach\" will fail.",
                "default": []
              },
              "initCommands": {
                "type": "array",
                "description": "Initialization commands executed upon debugger startup.",
                "default": []
              },
              "preRunCommands": {
                "type": "array",
                "description": "Commands executed just before the program is attached to.",
                "default": []
              },
              "postRunCommands": {
                "type": "array",
                "description": "Commands executed just as soon as the program is successfully attached when it's in a stopped state prior to any automatic continuation.",
                "default": []
              },
              "stopCommands": {
                "type": "array",
                "description": "Commands executed each time the program stops.",
                "default": []
              },
              "exitCommands": {
                "type": "array",
                "description": "Commands executed at the end of debugging session.",
                "default": []
              },
              "coreFile": {
                "type": "string",
                "description": "Path to the core file to debug."
              },
              "timeout": {
                "type": "string",
                "description": "The time in seconds to wait for a program to stop when attaching using \"attachCommands\". Defaults to 30 seconds."
              }
            }
          }
        }
      }
    ]
  },
  "extensionDependencies": [
    "vadimcn.vscode-lldb"
  ],
  "scripts": {
    "vscode:prepublish": "npm run bundle",
    "bundle": "del-cli ./dist && npm run bundle-extension && npm run bundle-documentation-webview",
    "bundle-extension": "del-cli ./dist && esbuild ./src/extension.ts --bundle --outfile=dist/src/extension.js --external:vscode --format=cjs --platform=node --target=node18 --minify --sourcemap",
    "bundle-documentation-webview": "npm run compile-documentation-webview -- --minify",
    "compile": "del-cli ./dist/ && tsc --build",
    "watch": "npm run compile -- --watch",
    "compile-documentation-webview": "del-cli ./assets/documentation-webview && esbuild ./src/documentation/webview/webview.ts --bundle --outfile=assets/documentation-webview/index.js --format=cjs --sourcemap",
    "watch-documentation-webview": "npm run compile-documentation-webview -- --watch",
    "lint": "eslint ./ --ext ts && tsc --noEmit",
    "update-swift-docc-render": "tsx ./scripts/update_swift_docc_render.ts",
    "format": "prettier --check .",
    "postinstall": "npm run update-swift-docc-render",
    "pretest": "npm run compile-tests",
    "soundness": "scripts/soundness.sh",
    "test": "vscode-test",
    "integration-test": "npm test -- --label integrationTests",
    "unit-test": "npm test -- --label unitTests",
    "coverage": "npm test -- --coverage",
    "compile-tests": "del-cli ./assets/test/**/.build && npm run compile",
    "package": "vsce package",
    "dev-package": "vsce package --no-update-package-json 2.0.1-dev",
    "preview-package": "vsce package --pre-release",
    "tag": "./scripts/tag_release.sh $npm_package_version",
    "contributors": "./scripts/generate_contributors_list.sh"
  },
  "devDependencies": {
    "@types/chai": "^4.3.19",
    "@types/chai-as-promised": "^7.1.8",
    "@types/chai-subset": "^1.3.5",
    "@types/glob": "^7.1.6",
    "@types/lcov-parse": "^1.0.2",
    "@types/mocha": "^10.0.10",
    "@types/mock-fs": "^4.13.4",
    "@types/node": "^18.19.71",
    "@types/plist": "^3.0.5",
    "@types/semver": "^7.5.8",
    "@types/sinon": "^17.0.3",
    "@types/sinon-chai": "^3.2.12",
    "@types/vscode": "^1.88.0",
    "@types/xml2js": "^0.4.14",
    "@typescript-eslint/eslint-plugin": "^8.21.0",
    "@typescript-eslint/parser": "^8.21.0",
    "@vscode/debugprotocol": "^1.68.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "@vscode/vsce": "^2.32.0",
    "chai": "^4.5.0",
    "chai-as-promised": "^7.1.2",
    "chai-subset": "^1.6.0",
    "del-cli": "^6.0.0",
    "esbuild": "^0.24.2",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^10.0.1",
    "mocha": "^10.8.2",
    "mock-fs": "^5.4.1",
    "node-pty": "^1.0.0",
    "prettier": "^3.4.2",
    "semver": "^7.6.3",
    "simple-git": "^3.27.0",
    "sinon": "^19.0.2",
    "sinon-chai": "^3.7.0",
    "source-map-support": "^0.5.21",
    "strip-ansi": "^6.0.1",
    "tsx": "^4.19.2",
    "typescript": "^5.7.3"
  },
  "dependencies": {
    "@vscode/codicons": "^0.0.36",
    "lcov-parse": "^1.0.0",
    "plist": "^3.1.0",
    "vscode-languageclient": "^9.0.1",
    "xml2js": "^0.6.2"
  }
}