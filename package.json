{
  "name": "swift-lang",
  "displayName": "Swift",
  "description": "Swift Language Support for Visual Studio Code.",
  "version": "1.10.4",
  "publisher": "sswg",
  "icon": "icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/swift-server/vscode-swift"
  },
  "engines": {
    "vscode": "^1.88.0"
  },
  "categories": [
    "Programming Languages",
    "Debuggers",
    "Snippets",
    "Testing"
  ],
  "keywords": [
    "swift",
    "sswg"
  ],
  "activationEvents": [
    "onLanguage:swift",
    "workspaceContains:Package.swift",
    "workspaceContains:compile_commands.json",
    "onDebugResolve:swift-lldb"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "icons": {
      "swift-icon": {
        "description": "The official icon for the Swift programming language",
        "default": {
          "fontPath": "assets/icon-font.woff",
          "fontCharacter": "\\E001"
        }
      }
    },
    "terminal": {
      "profiles": [
        {
          "title": "Swift",
          "id": "swift.terminalProfile"
        }
      ]
    },
    "languages": [
      {
        "id": "swift",
        "aliases": [
          "Swift"
        ],
        "extensions": [
          ".swiftinterface",
          ".swift"
        ]
      }
    ],
    "snippets": [
      {
        "language": "swift",
        "path": "./snippets/swift.code-snippets"
      },
      {
        "language": "swift",
        "path": "./snippets/xctest.code-snippets"
      },
      {
        "language": "swift",
        "path": "./snippets/swift-testing.code-snippets"
      }
    ],
    "commands": [
      {
        "command": "swift.createNewProject",
        "title": "Create New Project...",
        "category": "Swift"
      },
      {
        "command": "swift.updateDependencies",
        "title": "Update Package Dependencies",
        "icon": "$(cloud-download)",
        "category": "Swift"
      },
      {
        "command": "swift.resolveDependencies",
        "title": "Resolve Package Dependencies",
        "icon": "$(refresh)",
        "category": "Swift"
      },
      {
        "command": "swift.cleanBuild",
        "title": "Clean Build Folder",
        "category": "Swift"
      },
      {
        "command": "swift.run",
        "title": "Run Build",
        "category": "Swift"
      },
      {
        "command": "swift.debug",
        "title": "Debug Build",
        "category": "Swift"
      },
      {
        "command": "swift.resetPackage",
        "title": "Reset Package Dependencies",
        "icon": "$(clear-all)",
        "category": "Swift"
      },
      {
        "command": "swift.runScript",
        "title": "Run Swift Script",
        "category": "Swift"
      },
      {
        "command": "swift.useLocalDependency",
        "title": "Use Local Version",
        "category": "Swift"
      },
      {
        "command": "swift.editDependency",
        "title": "Edit Locally",
        "category": "Swift"
      },
      {
        "command": "swift.uneditDependency",
        "title": "Revert To Original Version",
        "category": "Swift"
      },
      {
        "command": "swift.openInWorkspace",
        "title": "Add to Workspace",
        "category": "Swift"
      },
      {
        "command": "swift.openExternal",
        "title": "View Repository",
        "category": "Swift"
      },
      {
        "command": "swift.openPackage",
        "title": "Open Package.swift",
        "category": "Swift"
      },
      {
        "command": "swift.restartLSPServer",
        "title": "Restart LSP Server",
        "category": "Swift"
      },
      {
        "command": "swift.switchPlatform",
        "title": "Select Target Platform...",
        "category": "Swift"
      },
      {
        "command": "swift.selectToolchain",
        "title": "Select Toolchain...",
        "category": "Swift"
      },
      {
        "command": "swift.runSnippet",
        "title": "Run Swift Snippet",
        "category": "Swift"
      },
      {
        "command": "swift.debugSnippet",
        "title": "Debug Swift Snippet",
        "category": "Swift"
      },
      {
        "command": "swift.runPluginTask",
        "title": "Run Command Plugin",
        "category": "Swift"
      },
      {
        "command": "swift.insertFunctionComment",
        "title": "Insert Function Comment",
        "category": "Swift"
      },
      {
        "command": "swift.attachDebugger",
        "title": "Attach to Process...",
        "category": "Swift"
      },
      {
        "command": "swift.captureDiagnostics",
        "title": "Capture VS Code Swift Diagnostic Bundle",
        "category": "Swift"
      },
      {
        "command": "swift.clearDiagnosticsCollection",
        "title": "Clear Diagnostics Collection",
        "category": "Swift"
      }
    ],
    "configuration": [
      {
        "title": "Swift",
        "properties": {
          "swift.path": {
            "type": "string",
            "default": "",
            "markdownDescription": "The path of the folder containing the Swift executables. The default is to look in the PATH environment variable.",
            "order": 1
          },
          "swift.buildArguments": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Arguments to pass to `swift build`. Keys and values should be provided as separate entries. If you have created a copy of the build task in `tasks.json` then these build arguments will not be propogated to that task.",
            "order": 2
          },
          "swift.testEnvironmentVariables": {
            "type": "object",
            "patternProperties": {
              ".*": {
                "type": "string"
              }
            },
            "default": {},
            "markdownDescription": "Environment variables to set when running tests. To set environment variables when debugging an application you should edit the relevant `launch.json` configuration",
            "scope": "machine-overridable",
            "order": 3
          },
          "swift.sanitizer": {
            "type": "string",
            "default": "off",
            "enum": [
              "off",
              "thread",
              "address"
            ],
            "description": "Runtime sanitizer instrumentation.",
            "scope": "machine-overridable",
            "order": 4
          },
          "swift.searchSubfoldersForPackages": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Search sub-folders of workspace folder for Swift Packages at start up.",
            "scope": "machine-overridable",
            "order": 5
          },
          "swift.autoGenerateLaunchConfigurations": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When loading a `Package.swift`, auto-generate `launch.json` configurations for running any executables.",
            "scope": "machine-overridable",
            "order": 6
          },
          "swift.disableAutoResolve": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Disable automatic running of `swift package resolve`. This will also disable searching for command plugins and the initial test discovery process as both of these can kick of a resolve.",
            "scope": "machine-overridable",
            "order": 7
          },
          "swift.diagnosticsCollection": {
            "type": "string",
            "default": "keepSourceKit",
            "description": "Controls how diagnostics from the various providers are merged into the `swift` diagnostics collection.",
            "enum": [
              "onlySwiftc",
              "onlySourceKit",
              "keepSwiftc",
              "keepSourceKit",
              "keepAll"
            ],
            "enumDescriptions": [
              "Only provide diagnostics from `swiftc`.",
              "Only provide diagnostics from `SourceKit`.",
              "When merging diagnostics, give precedence to diagnostics from `swiftc`.",
              "When merging diagnostics, give precedence to diagnostics from `SourceKit`.",
              "Keep diagnostics from all providers."
            ],
            "order": 8
          },
          "swift.diagnosticsStyle": {
            "type": "string",
            "default": "llvm",
            "description": "Controls which -diagnostic-style option to pass to `swiftc` when running `swift` tasks.",
            "enum": [
              "default",
              "llvm",
              "swift"
            ],
            "enumDescriptions": [
              "Use whichever diagnostics style `swiftc` produces by default.",
              "Use the \"llvm\" diagnostic style. This allows the parsing of \"notes\".",
              "Use the \"swift\" diagnostic style. This means that \"notes\" will not be parsed. This option will not work for Swift versions prior to 5.10."
            ],
            "order": 9
          },
          "swift.backgroundCompilation": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "**Experimental**: Run `swift build` in the background whenever a file is saved.",
            "order": 10
          },
          "swift.actionAfterBuildError": {
            "type": "string",
            "default": "Focus Terminal",
            "enum": [
              "Focus Problems",
              "Focus Terminal",
              "Do Nothing"
            ],
            "enumDescriptions": [
              "Focus on Problems View",
              "Focus on Build Task Terminal"
            ],
            "markdownDescription": "Action after a Build task generates errors.",
            "order": 11
          },
          "swift.buildPath": {
            "type": "string",
            "default": "",
            "markdownDescription": "Path to the build directory passed to all swift package manager commands.",
            "order": 12
          },
          "swift.disableSwiftPackageManagerIntegration": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Disables automated Build Tasks, Package Dependency view, Launch configuration generation and TestExplorer.",
            "order": 13
          },
          "swift.warnAboutSymlinkCreation": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether or not the extension will warn about being unable to create symlinks. (Windows only)",
            "scope": "application",
            "order": 14
          },
          "swift.enableTerminalEnvironment": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether or not the extension will contribute Swift environment variables to the integrated terminal.",
            "order": 15
          }
        }
      },
      {
        "title": "Code Coverage",
        "properties": {
          "swift.excludeFromCodeCoverage": {
            "description": "A list of paths to exclude from code coverage reports. Paths can be absolute or relative to the workspace root.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        }
      },
      {
        "title": "User Interface",
        "properties": {
          "swift.excludePathsFromPackageDependencies": {
            "description": "A list of paths to exclude from the Package Dependencies view.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              ".git",
              ".github"
            ]
          },
          "swift.showBuildStatus": {
            "type": "string",
            "default": "swiftStatus",
            "description": "Controls where to show the Swift build progress when running a `swift` build task.",
            "enum": [
              "never",
              "swiftStatus",
              "progress",
              "notification"
            ],
            "enumDescriptions": [
              "Never show the Swift build status.",
              "Show the Swift build status in a status bar item provided by the Swift extension.",
              "Show the Swift build status in the \"Progress Message\" status bar item provided by VS Code.",
              "Show the Swift build status as a progress notification."
            ]
          },
          "swift.showCreateSwiftProjectInWelcomePage": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether or not the create new swift project button appears in the welcome page."
          },
          "swift.openAfterCreateNewProject": {
            "type": "string",
            "enum": [
              "always",
              "alwaysNewWindow",
              "whenNoFolderOpen",
              "prompt"
            ],
            "enumDescriptions": [
              "Always open in current window.",
              "Always open in a new window.",
              "Only open in current window when no folder is opened.",
              "Always prompt for action."
            ],
            "default": "prompt",
            "description": "Controls whether to open a swift project automatically after creating it."
          }
        }
      },
      {
        "title": "SourceKit-LSP",
        "properties": {
          "swift.sourcekit-lsp.serverPath": {
            "type": "string",
            "markdownDescription": "The path of the `sourcekit-lsp` executable. The default is to look in the path where `swift` is found.",
            "markdownDeprecationMessage": "**Deprecated**: The sourcekit-lsp executable relies on outputs from tools in your current toolchain. If your sourcekit-lsp version does not match your toolchain you may experience unexpected behaviour.",
            "order": 1
          },
          "swift.sourcekit-lsp.serverArguments": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Arguments to pass to SourceKit-LSP. Argument keys and values should be provided as separate entries in the array e.g. ['--log-level', 'debug']",
            "order": 2
          },
          "swift.sourcekit-lsp.supported-languages": {
            "type": "array",
            "default": [
              "swift",
              "objective-c",
              "objective-cpp",
              "c",
              "cpp"
            ],
            "description": "List of languages supported by SourceKit-LSP. This is used to determine whether SourceKit-LSP should provide language features for a particular file type.",
            "items": {
              "type": "string",
              "enum": [
                "swift",
                "objective-c",
                "objective-cpp",
                "c",
                "cpp"
              ]
            },
            "order": 4
          },
          "swift.sourcekit-lsp.trace.server": {
            "type": "string",
            "default": "off",
            "enum": [
              "off",
              "messages",
              "verbose"
            ],
            "description": "Traces the communication between VS Code and the SourceKit-LSP language server.",
            "order": 5
          },
          "swift.sourcekit-lsp.disable": {
            "type": "boolean",
            "default": false,
            "description": "Disable the running of SourceKit-LSP.",
            "order": 6
          },
          "sourcekit-lsp.serverPath": {
            "type": "string",
            "markdownDescription": "The path of the `sourcekit-lsp` executable. The default is to look in the path where `swift` is found.",
            "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.serverPath#` instead.",
            "order": 1
          },
          "sourcekit-lsp.serverArguments": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Arguments to pass to SourceKit-LSP. Argument keys and values should be provided as separate entries in the array e.g. ['--log-level', 'debug']",
            "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.serverArguments#` instead.",
            "order": 2
          },
          "sourcekit-lsp.inlayHints.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Render inlay type annotations in the editor. Inlay hints require Swift 5.6.",
            "markdownDeprecationMessage": "**Deprecated**: Please use `#editor.inlayHints.enabled#` instead.",
            "order": 3
          },
          "sourcekit-lsp.support-c-cpp": {
            "type": "string",
            "default": "cpptools-inactive",
            "enum": [
              "enable",
              "disable",
              "cpptools-inactive"
            ],
            "enumDescriptions": [
              "Always enable",
              "Always disable",
              "Disable when C/C++ extension is active"
            ],
            "description": "Add LSP functionality for C/C++ files. By default this is set to disable when the C/C++ extension is active.",
            "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.supported-languages#` instead.",
            "order": 5
          },
          "sourcekit-lsp.trace.server": {
            "type": "string",
            "default": "off",
            "enum": [
              "off",
              "messages",
              "verbose"
            ],
            "description": "Traces the communication between VS Code and the SourceKit-LSP language server.",
            "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.trace.server#` instead.",
            "order": 6
          },
          "sourcekit-lsp.disable": {
            "type": "boolean",
            "default": false,
            "description": "Disable the running of SourceKit-LSP.",
            "markdownDeprecationMessage": "**Deprecated**: Please use `#swift.sourcekit-lsp.disable#` instead.",
            "order": 7
          }
        }
      },
      {
        "title": "Debugger",
        "properties": {
          "swift.debugger.useDebugAdapterFromToolchain": {
            "type": "boolean",
            "default": false,
            "description": "Use lldb debug adapter packaged with Swift toolchain as your debug adapter. This is currently only available on Windows platforms or macOS Swift 6",
            "order": 1
          },
          "swift.debugger.path": {
            "type": "string",
            "default": "",
            "description": "Path to lldb debug adapter.",
            "order": 2
          }
        }
      },
      {
        "title": "Advanced",
        "properties": {
          "swift.swiftEnvironmentVariables": {
            "type": "object",
            "patternProperties": {
              ".*": {
                "type": "string"
              }
            },
            "default": {},
            "markdownDescription": "Additional environment variables to pass to swift operations.",
            "order": 1
          },
          "swift.runtimePath": {
            "type": "string",
            "default": "",
            "description": "The path of the folder containing the Swift runtime libraries.",
            "order": 2
          },
          "swift.SDK": {
            "type": "string",
            "default": "",
            "description": "The path of the SDK to compile against (`--sdk` parameter). The default SDK is determined by the environment on macOS and Windows.",
            "order": 3
          },
          "swift.diagnostics": {
            "type": "boolean",
            "default": false,
            "description": "Output additional diagnostics to the Swift Output View.",
            "order": 100
          }
        }
      }
    ],
    "keybindings": [
      {
        "command": "swift.insertFunctionComment",
        "key": "Alt+Ctrl+/",
        "mac": "Alt+Cmd+/",
        "when": "editorTextFocus"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "swift.createNewProject",
          "when": "!swift.isActivated || swift.createNewProjectAvailable"
        },
        {
          "command": "swift.updateDependencies",
          "when": "swift.hasPackage"
        },
        {
          "command": "swift.resolveDependencies",
          "when": "swift.hasPackage"
        },
        {
          "command": "swift.cleanBuild",
          "when": "swift.hasPackage"
        },
        {
          "command": "swift.switchPlatform",
          "when": "swift.isActivated && isMac"
        },
        {
          "command": "swift.insertFunctionComment",
          "when": "swift.isActivated"
        },
        {
          "command": "swift.resetPackage",
          "when": "swift.hasPackage"
        },
        {
          "command": "swift.restartLSPServer",
          "when": "swift.isActivated"
        },
        {
          "command": "swift.openPackage",
          "when": "swift.hasPackage"
        },
        {
          "command": "swift.useLocalDependency",
          "when": "false"
        },
        {
          "command": "swift.editDependency",
          "when": "false"
        },
        {
          "command": "swift.openInWorkspace",
          "when": "false"
        },
        {
          "command": "swift.uneditDependency",
          "when": "false"
        },
        {
          "command": "swift.openExternal",
          "when": "false"
        },
        {
          "command": "swift.run",
          "when": "editorLangId == swift && swift.currentTargetType == 'executable'"
        },
        {
          "command": "swift.debug",
          "when": "editorLangId == swift && swift.currentTargetType == 'executable'"
        },
        {
          "command": "swift.runScript",
          "when": "!swift.fileIsSnippet && editorLangId == swift && swift.currentTargetType == 'none'"
        },
        {
          "command": "swift.runSnippet",
          "when": "swift.fileIsSnippet"
        },
        {
          "command": "swift.debugSnippet",
          "when": "swift.fileIsSnippet"
        },
        {
          "command": "swift.runPluginTask",
          "when": "swift.packageHasPlugins"
        },
        {
          "command": "swift.attachDebugger",
          "when": "swift.lldbVSCodeAvailable"
        }
      ],
      "editor/context": [
        {
          "submenu": "swift.editor"
        }
      ],
      "swift.editor": [
        {
          "command": "swift.run",
          "group": "1_file@1",
          "when": "editorLangId == swift && swift.currentTargetType == 'executable'"
        },
        {
          "command": "swift.debug",
          "group": "1_file@2",
          "when": "editorLangId == swift && swift.currentTargetType == 'executable'"
        },
        {
          "command": "swift.runScript",
          "group": "1_file@3",
          "when": "!swift.fileIsSnippet && editorLangId == swift && swift.currentTargetType == 'none'"
        },
        {
          "command": "swift.runSnippet",
          "group": "1_file@4",
          "when": "swift.fileIsSnippet"
        },
        {
          "command": "swift.debugSnippet",
          "group": "1_file@5",
          "when": "swift.fileIsSnippet"
        },
        {
          "command": "swift.cleanBuild",
          "group": "2_pkg@1",
          "when": "swift.hasPackage"
        }
      ],
      "view/title": [
        {
          "command": "swift.updateDependencies",
          "when": "view == packageDependencies",
          "group": "navigation"
        },
        {
          "command": "swift.resolveDependencies",
          "when": "view == packageDependencies",
          "group": "navigation"
        },
        {
          "command": "swift.resetPackage",
          "when": "view == packageDependencies",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "swift.useLocalDependency",
          "when": "view == packageDependencies && viewItem == remote"
        },
        {
          "command": "swift.uneditDependency",
          "when": "view == packageDependencies && viewItem == editing"
        },
        {
          "command": "swift.openInWorkspace",
          "when": "view == packageDependencies && viewItem == editing"
        },
        {
          "command": "swift.openInWorkspace",
          "when": "view == packageDependencies && viewItem == local"
        },
        {
          "command": "swift.openExternal",
          "when": "view == packageDependencies && viewItem != local"
        }
      ]
    },
    "submenus": [
      {
        "id": "swift.editor",
        "label": "Swift"
      }
    ],
    "problemMatchers": [
      {
        "name": "swiftc",
        "owner": "swift",
        "source": "swiftc",
        "fileLocation": "absolute",
        "pattern": [
          {
            "regexp": "^(.*?):(\\d+)(?::(\\d+))?:\\s+(warning|error|note):\\s+(.*)$",
            "file": 1,
            "line": 2,
            "column": 3,
            "severity": 4,
            "message": 5
          }
        ]
      }
    ],
    "taskDefinitions": [
      {
        "type": "swift",
        "properties": {
          "args": {
            "description": "An array of arguments for the command. Each argument will be quoted separately.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "env": {
            "type": "object",
            "patternProperties": {
              ".*": {
                "type": "string"
              }
            },
            "description": "Additional environment variables to set when running the task.",
            "default": {}
          },
          "cwd": {
            "description": "The folder to run the task in.",
            "type": "string"
          },
          "disableTaskQueue": {
            "description": "Disable any queued tasks while running the task. This includes the auto resolve when Packages.resolved is updated.",
            "type": "boolean"
          },
          "dontTriggerTestDiscovery": {
            "description": "Don't trigger the test discovery process.",
            "type": "boolean"
          },
          "showBuildStatus": {
            "description": "Where to show the Swift build progress when running a `swift` build task. Default comes from the `swift.showBuildStatus` setting.",
            "type": "string",
            "enum": [
              "never",
              "swiftStatus",
              "progress",
              "notification"
            ]
          },
          "macos": {
            "type": "object",
            "description": "macOS specific task configuration",
            "properties": {
              "args": {
                "description": "An array of arguments for the command. Each argument will be quoted separately.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "env": {
                "type": "object",
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "description": "Additional environment variables to set when running the task.",
                "default": {}
              },
              "cwd": {
                "description": "The folder to run the task in.",
                "type": "string"
              }
            }
          },
          "linux": {
            "type": "object",
            "description": "Linux specific task configuration",
            "properties": {
              "args": {
                "description": "An array of arguments for the command. Each argument will be quoted separately.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "env": {
                "type": "object",
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "description": "Additional environment variables to set when running the task.",
                "default": {}
              },
              "cwd": {
                "description": "The folder to run the task in.",
                "type": "string"
              }
            }
          },
          "windows": {
            "type": "object",
            "description": "Windows specific task configuration",
            "properties": {
              "args": {
                "description": "An array of arguments for the command. Each argument will be quoted separately.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "env": {
                "type": "object",
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "description": "Additional environment variables to set when running the task.",
                "default": {}
              },
              "cwd": {
                "description": "The folder to run the task in.",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "args"
        ]
      },
      {
        "type": "swift-plugin",
        "properties": {
          "command": {
            "description": "The plugin command to execute. This should not contain any arguments as it will be quoted.",
            "type": "string"
          },
          "args": {
            "description": "An array of arguments for the command. Each argument will be quoted separately.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disableSandbox": {
            "description": "Plugins normally run inside a sandbox. Set this to true to disable the sandbox when running .",
            "type": "boolean"
          },
          "allowWritingToPackageDirectory": {
            "description": "Allow this plugin to write to the package directory.",
            "type": "boolean"
          },
          "cwd": {
            "description": "The folder to run the swift plugin in.",
            "type": "string"
          },
          "disableTaskQueue": {
            "description": "Disable any queued tasks while running this command plugin. This includes the auto resolve when Packages.resolved is updated.",
            "type": "boolean"
          }
        },
        "required": [
          "command",
          "args"
        ]
      }
    ],
    "views": {
      "explorer": [
        {
          "id": "packageDependencies",
          "name": "Package Dependencies",
          "icon": "$(archive)",
          "when": "swift.hasPackage"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "explorer",
        "contents": "You can also create a new Swift project.\n[Create Swift Project](command:swift.createNewProject)",
        "when": "workspaceFolderCount == 0 && config.swift.showCreateSwiftProjectInWelcomePage"
      }
    ],
    "breakpoints": [
      {
        "language": "asm"
      },
      {
        "language": "c"
      },
      {
        "language": "cpp"
      },
      {
        "language": "objective-c"
      },
      {
        "language": "objective-cpp"
      },
      {
        "language": "rust"
      },
      {
        "language": "swift"
      }
    ],
    "debuggers": [
      {
        "type": "swift-lldb",
        "label": "Swift LLDB Debugger",
        "configurationAttributes": {
          "launch": {
            "required": [
              "program"
            ],
            "properties": {
              "program": {
                "type": "string",
                "description": "Path to the program to debug."
              },
              "args": {
                "type": [
                  "array",
                  "string"
                ],
                "description": "Program arguments.",
                "default": []
              },
              "cwd": {
                "type": "string",
                "description": "Program working directory.",
                "default": "${workspaceRoot}"
              },
              "env": {
                "type": "object",
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "description": "Additional environment variables to set when launching the program.",
                "default": {}
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop after launch.",
                "default": false
              },
              "disableASLR": {
                "type": "boolean",
                "description": "Enable or disable Address space layout randomization if the debugger supports it.",
                "default": true
              },
              "disableSTDIO": {
                "type": "boolean",
                "description": "Don't retrieve STDIN, STDOUT and STDERR as the program is running.",
                "default": false
              },
              "shellExpandArguments": {
                "type": "boolean",
                "description": "Expand program arguments as a shell would without actually launching the program in a shell.",
                "default": false
              },
              "detachOnError": {
                "type": "boolean",
                "description": "Detach from the program.",
                "default": false
              },
              "sourcePath": {
                "type": "string",
                "description": "Specify a source path to remap \"./\" to allow full paths to be used when setting breakpoints in binaries that have relative source paths."
              },
              "sourceMap": {
                "type": "array",
                "description": "Specify an array of path remappings; each element must itself be a two element array containing a source and destination pathname. Overrides sourcePath.",
                "default": []
              },
              "debuggerRoot": {
                "type": "string",
                "description": "Specify a working directory to set the debug adaptor to so relative object files can be located."
              },
              "targetTriple": {
                "type": "string",
                "description": "Triplet of the target architecture to override value derived from the program file."
              },
              "platformName": {
                "type": "string",
                "description": "Name of the execution platform to override value derived from the program file."
              },
              "initCommands": {
                "type": "array",
                "description": "Initialization commands executed upon debugger startup.",
                "default": []
              },
              "preRunCommands": {
                "type": "array",
                "description": "Commands executed just before the program is launched.",
                "default": []
              },
              "postRunCommands": {
                "type": "array",
                "description": "Commands executed just as soon as the program is successfully launched when it's in a stopped state prior to any automatic continuation.",
                "default": []
              },
              "launchCommands": {
                "type": "array",
                "description": "Custom commands that are executed instead of launching a process. A target will be created with the launch arguments prior to executing these commands. The commands may optionally create a new target and must perform a launch. A valid process must exist after these commands complete or the \"launch\" will fail. Launch the process with \"process launch -s\" to make the process to at the entry point since lldb-vscode will auto resume if necessary.",
                "default": []
              },
              "stopCommands": {
                "type": "array",
                "description": "Commands executed each time the program stops.",
                "default": []
              },
              "exitCommands": {
                "type": "array",
                "description": "Commands executed at the end of debugging session.",
                "default": []
              },
              "runInTerminal": {
                "type": "boolean",
                "description": "Launch the program inside an integrated terminal in the IDE. Useful for debugging interactive command line programs",
                "default": false
              },
              "timeout": {
                "type": "string",
                "description": "The time in seconds to wait for a program to stop at entry point when launching with \"launchCommands\". Defaults to 30 seconds."
              }
            }
          },
          "attach": {
            "properties": {
              "program": {
                "type": "string",
                "description": "Path to the program to attach to."
              },
              "pid": {
                "type": [
                  "number"
                ],
                "description": "System process ID to attach to."
              },
              "waitFor": {
                "type": "boolean",
                "description": "If set to true, then wait for the process to launch by looking for a process with a basename that matches `program`. No process ID needs to be specified when using this flag.",
                "default": true
              },
              "sourcePath": {
                "type": "string",
                "description": "Specify a source path to remap \"./\" to allow full paths to be used when setting breakpoints in binaries that have relative source paths."
              },
              "sourceMap": {
                "type": "array",
                "description": "Specify an array of path remappings; each element must itself be a two element array containing a source and destination pathname. Overrides sourcePath.",
                "default": []
              },
              "debuggerRoot": {
                "type": "string",
                "description": "Specify a working directory to set the debug adaptor to so relative object files can be located."
              },
              "targetTriple": {
                "type": "string",
                "description": "Triplet of the target architecture to override value derived from the program file."
              },
              "platformName": {
                "type": "string",
                "description": "Name of the execution platform to override value derived from the program file."
              },
              "attachCommands": {
                "type": "array",
                "description": "Custom commands that are executed instead of attaching to a process ID or to a process by name. These commands may optionally create a new target and must perform an attach. A valid process must exist after these commands complete or the \"attach\" will fail.",
                "default": []
              },
              "initCommands": {
                "type": "array",
                "description": "Initialization commands executed upon debugger startup.",
                "default": []
              },
              "preRunCommands": {
                "type": "array",
                "description": "Commands executed just before the program is attached to.",
                "default": []
              },
              "postRunCommands": {
                "type": "array",
                "description": "Commands executed just as soon as the program is successfully attached when it's in a stopped state prior to any automatic continuation.",
                "default": []
              },
              "stopCommands": {
                "type": "array",
                "description": "Commands executed each time the program stops.",
                "default": []
              },
              "exitCommands": {
                "type": "array",
                "description": "Commands executed at the end of debugging session.",
                "default": []
              },
              "coreFile": {
                "type": "string",
                "description": "Path to the core file to debug."
              },
              "timeout": {
                "type": "string",
                "description": "The time in seconds to wait for a program to stop when attaching using \"attachCommands\". Defaults to 30 seconds."
              }
            }
          }
        }
      }
    ]
  },
  "extensionDependencies": [
    "vadimcn.vscode-lldb"
  ],
  "scripts": {
    "vscode:prepublish": "npm run esbuild-base -- --minify",
    "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=dist/extension.js --external:vscode --format=cjs --platform=node --target=node18",
    "esbuild": "npm run esbuild-base -- --sourcemap",
    "esbuild-watch": "npm run esbuild-base -- --sourcemap --watch",
    "compile": "tsc",
    "watch": "tsc --watch",
    "lint": "eslint ./ --ext ts && tsc --noEmit",
    "format": "prettier --check src test",
    "pretest": "npm run compile && find ./assets/test -type d -name '.build' -exec rm -rf {} + && find . -type d -name 'Package.resolved' -exec rm -rf {} + && tsc -p ./",
    "test": "vscode-test",
    "coverage": "npm run pretest && vscode-test --coverage",
    "compile-tests": "find ./assets/test -type d -name '.build' -exec rm -rf {} + && npm run compile && npm run esbuild",
    "package": "vsce package",
    "dev-package": "vsce package --no-update-package-json 1.10.5-dev",
    "preview-package": "vsce package --pre-release",
    "tag": "./scripts/tag_release.sh $npm_package_version",
    "contributors": "./scripts/generate_contributors_list.sh"
  },
  "devDependencies": {
    "@types/glob": "^7.1.6",
    "@types/lcov-parse": "^1.0.2",
    "@types/mocha": "^10.0.7",
    "@types/node": "^18.19.39",
    "@types/plist": "^3.0.5",
    "@types/vscode": "^1.88.0",
    "@types/xml2js": "^0.4.14",
    "@typescript-eslint/eslint-plugin": "^7.15.0",
    "@typescript-eslint/parser": "^7.15.0",
    "@vscode/test-cli": "^0.0.9",
    "@vscode/test-electron": "^2.4.1",
    "@vscode/vsce": "^2.29.0",
    "esbuild": "^0.23.0",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "glob": "~7.2.3",
    "mocha": "^10.6.0",
    "node-pty": "^1.0.0",
    "prettier": "3.3.2",
    "strip-ansi": "^6.0.1",
    "typescript": "^5.5.3"
  },
  "dependencies": {
    "lcov-parse": "^1.0.0",
    "plist": "^3.1.0",
    "vscode-languageclient": "^9.0.1",
    "xml2js": "^0.6.2"
  }
}